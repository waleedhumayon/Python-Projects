Waleed Humayon
4th December 2019
Design.txt 

The room.py file is responsible for forming the classes and objects. I began by reading through the data and analyzing any structural changes that may need to be made for the execution of the game. These changes included converting room number to ints, as well as item weight and uses. Converting all other data to uppercase so as to make it comply with the demands of the game. 
This part of the code also involved the utilization of a data structure to hold the data. After considerable deliberation I opted for the use of a DICTIONARY for each class object, indexing by the most prominent data present in the MetaData. This seemed to be the most efficient use of time and efforts, as indexing through keys was extremely time efficient.

The driver.py file involved more of a practical approach, trying to ensure that the game worked effectively. The dictionaries containing all of the class objects were imported from the room.py file. The information within those dictionaries was tied together and linked in the main(). After completing this, all the features of the game were added and the rule management system was put into place. Ultimately, the finished product was a working game.

The program can be dissected into two broad parts:
1.	File: room.py
	
	a.	This file primarily contains the  5 classes required for the program. It also initializes each class by calling on the 'def_initialize_(class name)' functions.
		
		- These functions read each file for the requisite information, perform basic house keeping such as removing line break characters and empty spaces, and then mould the data into a list.
		
		- That list is then used, through its index to initialize the different attributes of each class. 
	
	b. The room.py file also contains a Player class, that was mainly created to keep track of the player's items. This class is used in the execution of the game and is important for certain key functions.

2. File: driver.py
	
	a. The driver file begins by forming key functions that are imperative for the operation of the game. The functions are:
		
		- def menu: 
		Forms a menu and checks for valid input. Converts input to upper case and then assesses if it is valid with the rules of the game.
		
		- def direction_check: 
		Begins by forming a list containing all possible directions that may be valid for a particular room. This is named direction_lst. Then takes the user's input and indexes the direction_lst to assess which index of the room the player is trying to access. Based of this, if the particular room is locked as per the specification of the game (i.e. it has a negative number), the user is prevented from moving in that direction.
		
		- def walk_around: 
		Utilizes the Room method known as contextual description to simulate the user walking. Ensures that if the room has items present in them, whether initially or by the user dropping them during the course of the game.

		- def pickup_items:
		This function allows the user to pick up valid items in a given room. The strategy is to seek the input, compare it to the items in the room to ensure it is a valid item in play, then add that to the player items by utilizing the Player Class. Similarly, it removes the item from the room so that the item is removed from the contextual description. 

		- def game_management_system:
		Deals with the business end of the entire program, focusing mainly on the enforcement of the game rules. Deals with the executional framework for each available option that the player has. Most notably, the function utilizes all the dictionary of objects that were formed to alter the state of the game and to build a framework for the game to operate within. Ultimately, it uses the said objects to rate performance given the data and to produce an output regarding player performance. 

		- def main:
		The main function just does some clean up on the data, mostly conversions of the data into more malleable and program friendly structures. Ultimately, it calls the game management system with the requisite input to execute the game. 

		The overall strategy has been to break down the game into major functions that perform roles. These roles ensure that the game works effectively.

